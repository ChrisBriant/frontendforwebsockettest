[{"/home/chris/Documents/python/socketsproject/frontend/testsockets/src/index.js":"1","/home/chris/Documents/python/socketsproject/frontend/testsockets/src/App.js":"2","/home/chris/Documents/python/socketsproject/frontend/testsockets/src/reportWebVitals.js":"3","/home/chris/Documents/python/socketsproject/frontend/testsockets/src/services/socket.js":"4","/home/chris/Documents/python/socketsproject/frontend/testsockets/src/components/TestConnect.js":"5","/home/chris/Documents/python/socketsproject/frontend/testsockets/src/components/Users.js":"6","/home/chris/Documents/python/socketsproject/frontend/testsockets/src/components/SendName.js":"7","/home/chris/Documents/python/socketsproject/frontend/testsockets/src/components/Rooms.js":"8","/home/chris/Documents/python/socketsproject/frontend/testsockets/src/components/Room.js":"9"},{"size":500,"mtime":1611039083071,"results":"10","hashOfConfig":"11"},{"size":338,"mtime":1611292363440,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1611039083071,"results":"13","hashOfConfig":"11"},{"size":151,"mtime":1611295653172,"results":"14","hashOfConfig":"11"},{"size":7090,"mtime":1611641129088,"results":"15","hashOfConfig":"11"},{"size":507,"mtime":1611404422172,"results":"16","hashOfConfig":"11"},{"size":856,"mtime":1611641018009,"results":"17","hashOfConfig":"11"},{"size":1419,"mtime":1611640981093,"results":"18","hashOfConfig":"11"},{"size":3151,"mtime":1611604042289,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1n9bhe6",{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"22"},"/home/chris/Documents/python/socketsproject/frontend/testsockets/src/index.js",[],["43","44"],"/home/chris/Documents/python/socketsproject/frontend/testsockets/src/App.js",["45"],"import logo from './logo.svg';\nimport './App.css';\nimport TestConnect from './components/TestConnect.js';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <TestConnect />\n      </header>\n      <main>\n\n      </main>\n      <footer>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","/home/chris/Documents/python/socketsproject/frontend/testsockets/src/reportWebVitals.js",[],"/home/chris/Documents/python/socketsproject/frontend/testsockets/src/services/socket.js",[],["46","47"],"/home/chris/Documents/python/socketsproject/frontend/testsockets/src/components/TestConnect.js",["48","49"],"import {useEffect, useReducer} from 'react';\nimport { animateScroll } from \"react-scroll\";\nimport sock from '../services/socket';\nimport SendName from './SendName';\nimport Rooms from './Rooms';\nimport Room from './Room';\nimport Users from './Users';\n\nconst TestConnect = () => {\n  // const wsproto = 'wss';\n  // const wsuri = wsproto + \"://\" + window.location.hostname + \":8080/ws\";\n  // let sock = new WebSocket(wsuri);\n\n  const initialState = {\n                          response:'',\n                          showNameDialog:false,\n                          users: [],\n                          myId:null,\n                          myName:null,\n                          rooms:null,\n                          inRoom: false,\n                          roomName: '',\n                          roomMessages: [],\n                          otherMembers: []\n  };\n\n\n  const scrollDown = () => {\n    console.log('Using room effect');\n    animateScroll.scrollToBottom({\n      containerId: \"messages\"\n    });\n  };\n\n  function reducer(state, action) {\n    let msg;\n    let otherMembers;\n    let inRoom;\n    let roomMessages;\n    let roomName;\n\n    switch (action.type) {\n      case 'setResponse':\n        return {...state, response : action.payload};\n      case 'showNameDialog':\n        return {...state, showNameDialog : true};\n      case 'clientList':\n        return {...state, users : action.payload};\n      case 'setName':\n        console.log(action.payload);\n        return {...state, myName : action.payload};\n      case 'register':\n        return {...state, myId : action.payload};\n      case 'roomList':\n        return {...state, rooms : action.payload};\n      case 'enterRoom':\n        console.log('Tying to enter the room', action.payload);\n        if (action.payload.client.name === state.myName) {\n          msg = `Welcome, you have entered ${action.payload.name}.`;\n        } else {\n          msg = `${action.payload.client.name} has entered the room.`;\n        }\n        otherMembers = action.payload.members.filter((item) => (item.id !== state.myId));\n        return {  ...state,\n                  inRoom : true,\n                  roomName: action.payload.name,\n                  roomMessages : [...state.roomMessages,{ class:'entrance', msg }],\n                  otherMembers\n        };\n      case 'exitRoom':\n        msg = `${action.payload.client.name} has left the room.`;\n        //Declare variables for state as dependant on user being leaver\n        roomMessages= [...state.roomMessages,{ class:'entrance', msg }];\n        console.log('I AM LEAVING THE ROOM',action.payload.client.id,state.myId);\n        if(action.payload.client.id === state.myId) {\n          inRoom = false;\n          roomName = '';\n          otherMembers = [];\n          roomMessages = [];\n        } else {\n          inRoom = true;\n          roomName = action.payload.name;\n          otherMembers = action.payload.members.filter((item) => (item.id !== state.myId))\n            .filter((item) => (item.name !== action.payload.client.name));\n          console.log('Other members here', otherMembers);\n        }\n        return {  ...state,\n                  inRoom,\n                  roomName,\n                  roomMessages,\n                  otherMembers\n        };\n      case 'roomMessage':\n        scrollDown();\n        msg = `${action.payload.client.name}: ${action.payload.message} `;\n        return {  ...state,\n                  roomMessages : [...state.roomMessages,{ class:'message', msg }],\n        };\n      case 'roomPm':\n        console.log('Pay me now',action.payload);\n        scrollDown();\n        msg = `${action.payload.sender}: ${action.payload.message} `;\n        return {  ...state,\n                  roomMessages : [...state.roomMessages,{ class:'pm', msg }],\n        };\n      case 'destroyRoom':\n        //Forces an exit of room\n        return {  ...state,\n                  inRoom : false,\n                  roomName :'',\n                  roomMessages:[],\n                  otherMembers:[]\n        };\n      default:\n        return state;\n    }\n  }\n\n  //const [response,setResponse] = useState('');\n  const [state,dispatch] = useReducer(reducer,initialState);\n\n  useEffect( () => {\n    console.log('Using Effect');\n    if (sock) {\n       sock.onopen = function() {\n          console.log(\"Connected\");\n       }\n\n       sock.onclose = (e) =>  {\n          console.log(\"Connection closed (wasClean = \" + e.wasClean + \", code = \" + e.code + \", reason = '\" + e.reason + \"')\");\n          //this = null;\n          console.log(e,sock);\n       }\n\n       sock.onmessage = function(e) {\n          let data = JSON.parse(e.data)\n          //let data = e;\n          console.log(data);\n          switch(data.type) {\n              case 'register':\n                dispatch({type:'register', payload:data.yourid});\n                break;\n              case 'client_list':\n                dispatch({type:'clientList', payload:data.clients});\n                break;\n              case 'set_name':\n                dispatch({type:'setName', payload:data.message});\n                break;\n              case 'room_list':\n                dispatch({type:'roomList', payload:JSON.parse(data.rooms)});\n                break;\n              case 'room_entrance':\n                dispatch({type:'enterRoom', payload:data});\n                break;\n              case 'room_exit':\n                dispatch({type:'exitRoom', payload:data});\n                break;\n              case 'destroy_room':\n                dispatch({type:'destroyRoom', payload:data});\n                break;\n              case 'room_message':\n                dispatch({type:'roomMessage', payload:data});\n                break;\n              case 'in_room_pm':\n                dispatch({type:'roomPm', payload:data});\n                break;\n              default:\n                dispatch({type:'setResponse', payload:data.message});\n          }\n       }\n     }\n  }, [] );\n\n\n\n  const sendMessage = async () => {\n    console.log('Message sent');\n    if (sock) {\n       //await sock.send('@:Hello World!');\n       let payload = {\n         type : 'broadcast',\n         message : 'Hello World'\n       }\n       await sock.send(JSON.stringify(payload));\n       console.log(\"Sent \");\n    } else {\n       console.log(\"Not connected.\");\n    }\n  }\n\n  console.log('Something is rotten in the state of react', state);\n\n  return (\n    <div>\n      { state.myName ?\n        <>\n          <p>Welcome {state.myName}</p>\n          {\n            state.inRoom ?\n              <Room userId={state.myId}\n                    name={state.myName}\n                    roomName={state.roomName}\n                    roomMessages={state.roomMessages}\n                    otherMembers={state.otherMembers}\n                    /> :\n              <Rooms userId={state.myId} rooms={state.rooms}/>\n          }\n        </> :\n        <>\n          <p>Welcome</p>\n          <SendName userId={state.myId} />\n        </>\n      }\n\n    </div>\n  )\n}\n\n//REMOVED FOR TIME BEING\n// <button onClick={sendMessage}>Send Message</button>\n// <p>{state.response}</p>\n\nexport default TestConnect;\n","/home/chris/Documents/python/socketsproject/frontend/testsockets/src/components/Users.js",[],"/home/chris/Documents/python/socketsproject/frontend/testsockets/src/components/SendName.js",[],"/home/chris/Documents/python/socketsproject/frontend/testsockets/src/components/Rooms.js",[],"/home/chris/Documents/python/socketsproject/frontend/testsockets/src/components/Room.js",["50","51"],"import {useState} from 'react';\n//import { animateScroll } from \"react-scroll\";\nimport sock from '../services/socket';\n\nconst Room = (props) => {\n  console.log(props);\n\n  // useEffect( ()=> {\n  //   console.log('Using room effect');\n  //   animateScroll.scrollToBottom({\n  //     containerId: \"chatmessage\"\n  //   });\n  // }, props.roomMessages.length);\n\n  //const contentEditable = useRef('');\n  const [message,setMessage] = useState('');\n  const [pm,setPm] = useState(null);\n\n  const exitRoom = async () => {\n    let payload = {\n      'type' : 'exit_room',\n      'client_id' : props.userId,\n      'name' : props.roomName\n    }\n    await sock.send(JSON.stringify(payload));\n  }\n\n  const handleEditMessage = async (e) => {\n    console.log('text ', e.target.value);\n    setMessage(e.target.value);\n  }\n\n  const sendRoomMessage = async () => {\n    let payload = {\n      'type' : 'message_room',\n      'client_id' : props.userId,\n      'name' : props.roomName,\n      'message' : message\n    }\n    await sock.send(JSON.stringify(payload));\n  }\n\n\n  const sendMessage = async (e) => {\n    //Check for the '@' symbol with a username\n    let sendingPm = message.search(/@([^].)\\w+/i);\n    if (sendingPm == 0) {\n      console.log('Sending private message')\n      //Get the user and check exists\n      let person = message.split(':')[0].split('@')[1]\n      let personMember = props.otherMembers.filter((m) => (m.name === person));\n      if(personMember.length > 0) {\n        console.log('Person Exists',personMember);\n        let payload = {\n          'type' : 'room_pm',\n          'client_id' : personMember[0].id,\n          'message' : message,\n          'sender' : props.name\n        }\n        console.log('SENDING', payload);\n        await sock.send(JSON.stringify(payload));\n        //Clear message\n        setMessage('');\n      } else {\n        console.log('Person does not exist');\n        sendRoomMessage();\n        setMessage('');\n      }\n    } else {\n      console.log('Sending room message');\n      sendRoomMessage();\n      setMessage('');\n    }\n\n\n  }\n\n  const pmMember = async (member) => {\n    console.log('send a private message',member);\n    setMessage(`@${member.name}: `);\n    setPm(member);\n  }\n\n  return (\n    <>\n      <p>You are in {props.roomName}</p>\n      <div>\n        <p>Also in the room:</p>\n        {\n          props.otherMembers.map((member,i) => (\n            <button id={member.id} key={i} onClick={() => pmMember(member)}>{member.name}</button>\n          ))\n        }\n      </div>\n      <div id=\"messages\" className=\"message-div\">\n        <ul>\n          {\n            props.roomMessages.map((msg,i) => (\n              <li key={i} className={msg.class}>{msg.msg}</li>\n            ))\n          }\n        </ul>\n      </div>\n      <textarea\n        id=\"chatmessage\"\n        onChange={handleEditMessage}\n        value={message}\n      />\n      <button id=\"send-message\" onClick={sendMessage}>Send</button>\n      <div>\n        <button id=\"exit\" onClick={exitRoom}>Exit</button>\n      </div>\n    </>\n  );\n}\n\nexport default Room;\n\n//REMOVE for now\n//<div className=\"editable-div\" contentEditable=\"true\" onChange={handleEditMessage}></div>\n",{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":1,"column":8,"nodeType":"58","messageId":"59","endLine":1,"endColumn":12},{"ruleId":"52","replacedBy":"60"},{"ruleId":"54","replacedBy":"61"},{"ruleId":"56","severity":1,"message":"62","line":7,"column":8,"nodeType":"58","messageId":"59","endLine":7,"endColumn":13},{"ruleId":"56","severity":1,"message":"63","line":176,"column":9,"nodeType":"58","messageId":"59","endLine":176,"endColumn":20},{"ruleId":"56","severity":1,"message":"64","line":17,"column":10,"nodeType":"58","messageId":"59","endLine":17,"endColumn":12},{"ruleId":"65","severity":1,"message":"66","line":47,"column":19,"nodeType":"67","messageId":"68","endLine":47,"endColumn":21},"no-native-reassign",["69"],"no-negated-in-lhs",["70"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar",["69"],["70"],"'Users' is defined but never used.","'sendMessage' is assigned a value but never used.","'pm' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]